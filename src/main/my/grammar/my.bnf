
// idea demo https://jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/lexer_and_parser_definition.html

// BNF for AviatorScript https://www.yuque.com/boyan-avfmj/aviatorscript/rcx4q0

// define from https://github.com/JetBrains/Grammar-Kit/blob/master/grammars/Grammar.bnf

// BNF for EcmaScript.jj https://tomcopeland.blogs.com/EcmaScript.html

{
  classHeader = "license description"
  generate = [java="8" names="long" visitor-value="R"]

  parserClass = "my.lang.parser.MyLanguageParser"
  parserUtilClass = "my.lang.parser.MyLanguageParserUtil"

  extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix = "MyLanguage"
  psiImplClassSuffix = "Impl"
  psiPackage = "my.lang.psi"
  psiImplPackage = "my.lang.psi.impl"
  psiImplUtilClass = "my.lang.psi.MyLanguagePsiImplUtil"

  elementTypeHolderClass = "lang.psi.MyLanguageTypes"
  elementTypePrefix = "MY_"
  elementTypeClass = "my.lang.psi.MyLanguageElementType"
  tokenTypeClass = "my.lang.psi.MyLanguageTokenType"

  tokens = [

    //symbol define from https://github.com/go-lang-plugin-org/go-lang-idea-plugin/blob/master/grammars/go.bnf
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    RBRACK               =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'

    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','

    EQ                   =  '=='
    ASSIGN               =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    PLUS_PLUS            =  '++'
    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    MINUS_MINUS          =  '--'
    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
    BIT_OR_ASSIGN        =  '|='
    BIT_CLEAR_ASSIGN     =  '&^='
    BIT_CLEAR            =  '&^'
    COND_AND             =  '&&'
    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
    BIT_OR               =  '|'
    SHIFT_LEFT_ASSIGN    =  '<<='
    SHIFT_LEFT           =  '<<'
    SEND_CHANNEL         =  '<-'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
    QUOTIENT_ASSIGN      =  '/='
    QUOTIENT             =  '/'
    REMAINDER_ASSIGN     =  '%='
    REMAINDER            =  '%'
    SHIFT_RIGHT_ASSIGN   =  '>>='
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    VAR_ASSIGN           =  ':='
    TRIPLE_DOT           =  '...'
    DOT                  =  '.'

    // language common
    id = 'regexp:\w+'
    line_comment = 'regexp:##.*'
//    block_comment = 'regexp:/*..*/'

    //literal
    string = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    number = "regexp:[+-]?(0[xX][0-9a-fA-F]+|[1-9]\d*N?M?|\d+(\.\d+)?([Ee][+-]?\d+)?M?)"
    null = "nil"
    true = "TRUE"
    false = "FALSE"

    // keywords
    while = "while"
    try = "try"
    throw = "throw"
    return = "return"
    new = "new"
    let = "let"
    int = "int"
    in = "in"
    if = "if"
    for = "for"
    fn = "fn"
    break = "break"
    continue = "continue"

  ]
}

myFile ::= codes

codes ::= statement*

statement ::= line_comment | letStatement | forStatement |whileStatement |breakStatement|continueStatement | ifStatement|threeStatement | fnDefineStatement | fnInvokeStatement | newStatement |tryStatement|throwStatement |returnStatement {
   mixin = "my.lang.psi.impl.MyLanguageCodeElementImpl"
   implements = "my.lang.psi.MyLanguageActionElement"
   methods = [getName setName getNameIdentifier getPresentation]
}

letStatement ::= [let] id [BRACK_LEFT number BRACK_RIGHT] ASSIGN (express | fnInvokeExpress) [SEMICOLON]

forStatement ::= for id in id [PAREN_LEFT express {COMMA express}*] BRACE_LEFT codes BRACE_RIGHT

whileStatement ::= while express  BRACE_LEFT codes BRACE_RIGHT

breakStatement ::= break [SEMICOLON]

continueStatement ::= continue [SEMICOLON]

ifStatement ::= if express BRACE_LEFT codes BRACE_RIGHT {elseif express BRACE_LEFT codes BRACE_RIGHT }* {else express BRACE_LEFT codes BRACE_RIGHT}*

fnDefineStatement ::= fn id PAREN_LEFT id {COMMA id}* PAREN_RIGHT BRACE_LEFT codes BRACE_RIGHT

fnInvokeStatement ::= fnInvokeExpress [SEMICOLON]

returnStatement ::= return express [SEMICOLON]

tryStatement ::= try BRACE_LEFT codes BRACE_RIGHT catch express BRACE_LEFT codes BRACE_RIGHT

throwStatement ::= throw new express [SEMICOLON]

newStatement::= new refExpress PAREN_LEFT express PAREN_RIGHT [SEMICOLON]

threeStatement ::= threeExpress [SEMICOLON]

threeExpress ::= express QUESTION express COLON express

fnInvokeExpress ::= refExpress [PAREN_LEFT relationExpress PAREN_RIGHT]

express ::=  relationExpress | PAREN_LEFT express PAREN_RIGHT

relationExpress ::= (refExpress|value)   {(DASH | PLUS | MUL | PERCENT | FSLASH |bar |ANGLE_LEFT |ANGLE_LEFT ASSIGN|ANGLE_RIGHT |ANGLE_RIGHT ASSIGN|ASSIGN ASSIGN|AMP AMP|AMP TILDE) (refExpress|value)}* |(refExpress|value)  PAREN_LEFT express PAREN_RIGHT

//regExpress ::= FSLASH express FSLASH

refExpress ::= id {DOT id}* | DOLLAR number

//calOperate ::= DASH | PLUS | MUL | PERCENT | FSLASH |bar |ANGLE_LEFT |ANGLE_LEFT EQ|ANGLE_RIGHT |ANGLE_RIGHT EQ|EQ EQ|AMP AMP|AMP TILDE

value ::= string|number|boolean|null

boolean ::= true|false