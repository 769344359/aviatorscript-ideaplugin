/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package my.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static lang.psi.MyLanguageTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_MyLanguageLexer.flex</tt>
 */
public class _MyLanguageLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\17\4\1\22\0\1\17\1\36\1\7\1\4\1\16\1\46\1\41\1\5\1\32\1\33\1\45\1"+
    "\37\1\35\1\15\1\13\1\24\12\10\1\34\1\25\1\44\1\23\1\47\1\50\1\0\1\66\3\3\1"+
    "\14\1\65\5\3\1\51\1\12\1\11\3\3\1\63\1\67\1\62\1\64\5\3\1\30\1\6\1\31\1\42"+
    "\1\55\1\0\1\53\1\75\1\77\1\101\1\21\1\73\1\61\1\70\1\57\1\3\1\76\1\20\1\100"+
    "\1\60\1\72\2\3\1\52\1\56\1\22\1\74\1\3\1\54\1\3\1\71\1\3\1\26\1\40\1\27\1"+
    "\43\6\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\1\1\3\1\4\1\5"+
    "\1\1\1\2\3\3\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\11\3\1\33\1\0\1\34\4\0\1\3\1\0\1\35"+
    "\1\36\1\37\1\40\1\0\6\3\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\0\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\3\3\1\66\1\67\5\3\1\70"+
    "\4\3\1\34\1\71\1\0\1\72\1\0\1\73\2\3"+
    "\1\74\1\75\1\3\1\76\1\0\1\77\1\100\3\3"+
    "\1\101\1\102\1\103\3\3\1\104\3\3\1\71\1\0"+
    "\1\71\1\0\2\3\1\105\2\3\1\106\3\3\1\107"+
    "\5\3\3\0\1\3\1\110\1\111\2\3\1\112\1\113"+
    "\1\3\1\114\1\115\1\3\1\0\1\116\1\117\3\3"+
    "\1\0\1\3\1\120\1\3\1\0\1\3\1\121\1\122"+
    "\1\3\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\u0462\0\102\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\102\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u014a\0\102"+
    "\0\u098a\0\u018c\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\102\0\102"+
    "\0\102\0\u0294\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u0ca2\0\102\0\102\0\u0ce4"+
    "\0\102\0\102\0\u0d26\0\102\0\102\0\102\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\306\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\306\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u018c\0\u1104"+
    "\0\u1146\0\102\0\u1188\0\u11ca\0\u120c\0\u124e\0\306\0\306"+
    "\0\u1290\0\102\0\u12d2\0\102\0\102\0\u1314\0\u1356\0\u1398"+
    "\0\306\0\306\0\306\0\u13da\0\u141c\0\u145e\0\306\0\u14a0"+
    "\0\u14e2\0\u1524\0\102\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e"+
    "\0\306\0\u16b0\0\u16f2\0\102\0\u1734\0\u1776\0\u17b8\0\306"+
    "\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\306\0\306\0\u1a4c\0\u1a8e\0\306\0\306\0\u1ad0"+
    "\0\306\0\306\0\u1b12\0\u1b54\0\306\0\306\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\306\0\u1ce0\0\u1d22\0\u1d64\0\306"+
    "\0\u1da6\0\u1de8\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\2\4\1\11\1\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\2\1\40\1\41\1\42\1\43\1\44\1\4"+
    "\1\45\1\4\1\46\2\4\1\47\1\50\1\4\1\51"+
    "\2\4\1\52\5\4\1\53\1\4\1\54\1\4\1\55"+
    "\2\4\103\0\2\3\14\0\1\3\65\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\3\4\26\0\31\4\4\0"+
    "\1\56\75\0\5\57\1\60\1\61\73\57\6\62\1\63"+
    "\1\60\72\62\3\0\1\4\4\0\1\10\2\4\1\64"+
    "\1\65\3\0\1\4\1\65\1\4\26\0\31\4\13\0"+
    "\1\66\103\0\1\67\5\0\1\70\23\0\1\71\42\0"+
    "\1\72\72\0\2\3\14\0\1\14\1\73\64\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\1\4\1\74\1\4"+
    "\26\0\2\4\1\75\26\4\3\0\1\4\4\0\3\4"+
    "\1\0\1\4\3\0\1\76\2\4\26\0\7\4\1\77"+
    "\21\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\3\4\26\0\1\4\1\100\15\4\1\101\11\4\23\0"+
    "\1\102\17\0\1\103\61\0\1\104\101\0\1\105\101\0"+
    "\1\106\101\0\1\107\13\0\1\110\65\0\1\111\14\0"+
    "\1\112\64\0\1\113\15\0\1\114\1\115\1\116\61\0"+
    "\1\117\67\0\1\120\3\0\1\121\5\0\1\122\20\0"+
    "\1\123\60\0\1\124\101\0\1\125\101\0\1\126\23\0"+
    "\1\127\35\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\1\4\1\130\1\4\26\0\2\4\1\131\26\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\3\4\26\0"+
    "\17\4\1\132\11\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\7\4\1\133\12\4\1\134"+
    "\6\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\1\4\1\135\1\4\26\0\6\4\1\136\22\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\3\4\26\0"+
    "\12\4\1\137\16\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\15\4\1\140\13\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\3\4\26\0"+
    "\6\4\1\141\1\142\11\4\1\143\7\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\1\4"+
    "\1\144\27\4\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\2\4\1\145\16\4\1\146\7\4"+
    "\1\56\1\0\100\56\1\57\1\0\100\57\6\62\1\63"+
    "\1\147\72\62\10\0\1\150\74\0\1\4\4\0\3\4"+
    "\1\0\1\4\1\151\2\0\3\4\14\0\1\151\11\0"+
    "\31\4\13\0\1\152\107\0\1\153\63\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\2\4\1\154\26\0\31\4"+
    "\3\0\1\4\4\0\3\4\1\0\1\4\3\0\3\4"+
    "\26\0\27\4\1\155\1\4\3\0\1\4\4\0\3\4"+
    "\1\0\1\4\3\0\3\4\26\0\5\4\1\156\23\4"+
    "\3\0\1\4\4\0\3\4\1\0\1\4\3\0\3\4"+
    "\26\0\30\4\1\157\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\20\4\1\160\10\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\3\4\26\0"+
    "\1\4\1\161\27\4\23\0\1\162\127\0\1\163\53\0"+
    "\1\164\101\0\1\165\61\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\166\26\0\31\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\3\4"+
    "\1\167\25\4\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\6\4\1\170\22\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\2\4\1\171\26\0"+
    "\31\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\3\4\26\0\3\4\1\172\25\4\3\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\1\173\2\4\26\0\31\4"+
    "\3\0\1\4\4\0\3\4\1\0\1\4\3\0\3\4"+
    "\26\0\13\4\1\174\15\4\3\0\1\4\4\0\3\4"+
    "\1\0\1\4\3\0\3\4\26\0\1\175\30\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\3\4\26\0"+
    "\7\4\1\176\21\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\1\4\1\177\27\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\1\4\1\200"+
    "\1\4\26\0\31\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\2\4\1\201\26\0\31\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\7\4"+
    "\1\202\21\4\10\0\1\150\1\0\1\203\1\0\1\204"+
    "\4\0\1\204\70\0\1\205\113\0\1\206\62\0\1\207"+
    "\4\0\3\207\1\0\1\207\2\0\1\206\3\207\26\0"+
    "\31\207\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\3\4\26\0\24\4\1\210\4\4\3\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\1\4\1\211\1\4\26\0"+
    "\6\4\1\212\22\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\21\4\1\213\7\4\47\0"+
    "\1\214\35\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\3\4\26\0\23\4\1\215\5\4\3\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\3\4\26\0\4\4\1\216"+
    "\24\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\1\217\2\4\26\0\31\4\3\0\1\4\4\0\3\4"+
    "\1\0\1\220\3\0\3\4\26\0\31\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\16\4"+
    "\1\221\12\4\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\2\4\1\222\26\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\2\4"+
    "\1\223\26\4\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\26\4\1\224\2\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\2\4\1\225\26\0"+
    "\31\4\10\0\1\205\4\0\1\151\21\0\1\151\52\0"+
    "\1\205\1\0\1\203\72\0\1\226\4\0\3\226\1\0"+
    "\1\226\2\0\1\206\3\226\26\0\31\226\3\0\1\207"+
    "\4\0\3\207\1\0\1\207\2\0\1\227\3\207\1\230"+
    "\25\0\31\207\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\30\4\1\231\3\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\3\4\26\0\22\4\1\232"+
    "\6\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\3\4\26\0\3\4\1\233\25\4\3\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\3\4\26\0\1\4\1\234"+
    "\27\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\3\4\26\0\5\4\1\235\23\4\3\0\1\4\4\0"+
    "\3\4\1\0\1\4\3\0\1\4\1\236\1\4\26\0"+
    "\31\4\3\0\1\4\4\0\3\4\1\0\1\237\3\0"+
    "\3\4\26\0\31\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\1\240\2\4\26\0\31\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\25\4"+
    "\1\241\3\4\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\17\4\1\242\11\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\6\4"+
    "\1\243\22\4\3\0\1\226\4\0\3\226\1\0\1\226"+
    "\2\0\1\227\3\226\1\230\25\0\31\226\17\0\1\227"+
    "\3\0\1\230\75\0\1\230\4\0\1\244\60\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\2\4"+
    "\1\245\26\4\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\7\4\1\246\21\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\2\4\1\247\26\0"+
    "\31\4\3\0\1\4\4\0\3\4\1\0\1\4\3\0"+
    "\1\250\2\4\26\0\31\4\3\0\1\4\4\0\3\4"+
    "\1\0\1\4\3\0\3\4\26\0\7\4\1\251\21\4"+
    "\24\252\1\0\55\252\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\1\4\1\253\27\4\3\0"+
    "\1\4\4\0\3\4\1\0\1\4\3\0\3\4\26\0"+
    "\20\4\1\254\10\4\3\0\1\4\4\0\3\4\1\0"+
    "\1\4\3\0\3\4\26\0\23\4\1\255\5\4\24\252"+
    "\1\256\55\252\3\0\1\4\4\0\3\4\1\0\1\4"+
    "\3\0\3\4\26\0\6\4\1\257\22\4\3\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\1\4\1\260\1\4"+
    "\26\0\31\4\17\0\1\256\5\0\1\261\57\0\1\4"+
    "\4\0\3\4\1\0\1\4\3\0\3\4\26\0\7\4"+
    "\1\262\21\4\17\0\1\261\65\0\1\4\4\0\3\4"+
    "\1\0\1\4\3\0\3\4\26\0\10\4\1\263\20\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\7\11\1\1\1\11\11\1\1\11"+
    "\12\1\1\0\1\11\4\0\1\1\1\0\3\11\1\1"+
    "\1\0\6\1\13\11\1\1\2\11\1\0\2\11\1\1"+
    "\3\11\22\1\1\0\1\11\1\0\6\1\1\11\1\0"+
    "\2\11\15\1\1\11\1\0\1\1\1\0\5\1\1\11"+
    "\11\1\3\0\13\1\1\0\5\1\1\0\3\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MyLanguageLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MyLanguageLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 84: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 85: break;
          case 3: 
            { return MY_IDENTIFIER;
            } 
            // fall through
          case 86: break;
          case 4: 
            { return MY_DOT;
            } 
            // fall through
          case 87: break;
          case 5: 
            { return MY_MINUS;
            } 
            // fall through
          case 88: break;
          case 6: 
            { return MY_ASSIGN;
            } 
            // fall through
          case 89: break;
          case 7: 
            { return MY_QUOTIENT;
            } 
            // fall through
          case 90: break;
          case 8: 
            { return MY_SEMICOLON;
            } 
            // fall through
          case 91: break;
          case 9: 
            { return MY_BRACE_LEFT;
            } 
            // fall through
          case 92: break;
          case 10: 
            { return MY_BRACE_RIGHT;
            } 
            // fall through
          case 93: break;
          case 11: 
            { return MY_BRACK_LEFT;
            } 
            // fall through
          case 94: break;
          case 12: 
            { return MY_BRACK_RIGHT;
            } 
            // fall through
          case 95: break;
          case 13: 
            { return MY_PAREN_LEFT;
            } 
            // fall through
          case 96: break;
          case 14: 
            { return MY_PAREN_RIGHT;
            } 
            // fall through
          case 97: break;
          case 15: 
            { return MY_COLON;
            } 
            // fall through
          case 98: break;
          case 16: 
            { return MY_COMMA;
            } 
            // fall through
          case 99: break;
          case 17: 
            { return MY_NOT;
            } 
            // fall through
          case 100: break;
          case 18: 
            { return MY_PLUS;
            } 
            // fall through
          case 101: break;
          case 19: 
            { return MY_BIT_OR;
            } 
            // fall through
          case 102: break;
          case 20: 
            { return MY_BIT_AND;
            } 
            // fall through
          case 103: break;
          case 21: 
            { return MY_BIT_XOR;
            } 
            // fall through
          case 104: break;
          case 22: 
            { return MY_LESS;
            } 
            // fall through
          case 105: break;
          case 23: 
            { return MY_MUL;
            } 
            // fall through
          case 106: break;
          case 24: 
            { return MY_REMAINDER;
            } 
            // fall through
          case 107: break;
          case 25: 
            { return MY_GREATER;
            } 
            // fall through
          case 108: break;
          case 26: 
            { return MY_QUESTION;
            } 
            // fall through
          case 109: break;
          case 27: 
            { return MY_LINE_COMMENT;
            } 
            // fall through
          case 110: break;
          case 28: 
            { return MY_STRING;
            } 
            // fall through
          case 111: break;
          case 29: 
            { return MY_MINUS_MINUS;
            } 
            // fall through
          case 112: break;
          case 30: 
            { return MY_MINUS_ASSIGN;
            } 
            // fall through
          case 113: break;
          case 31: 
            { return MY_LAMBDA_TARGET;
            } 
            // fall through
          case 114: break;
          case 32: 
            { return MY_PARAMREF;
            } 
            // fall through
          case 115: break;
          case 33: 
            { return MY_EQ;
            } 
            // fall through
          case 116: break;
          case 34: 
            { return MY_EQ_TILDE;
            } 
            // fall through
          case 117: break;
          case 35: 
            { return MY_QUOTIENT_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 36: 
            { return MY_VAR_ASSIGN;
            } 
            // fall through
          case 119: break;
          case 37: 
            { return MY_NOT_EQ;
            } 
            // fall through
          case 120: break;
          case 38: 
            { return MY_PLUS_ASSIGN;
            } 
            // fall through
          case 121: break;
          case 39: 
            { return MY_PLUS_PLUS;
            } 
            // fall through
          case 122: break;
          case 40: 
            { return MY_BIT_OR_ASSIGN;
            } 
            // fall through
          case 123: break;
          case 41: 
            { return MY_COND_OR;
            } 
            // fall through
          case 124: break;
          case 42: 
            { return MY_BIT_AND_ASSIGN;
            } 
            // fall through
          case 125: break;
          case 43: 
            { return MY_COND_AND;
            } 
            // fall through
          case 126: break;
          case 44: 
            { return MY_BIT_CLEAR;
            } 
            // fall through
          case 127: break;
          case 45: 
            { return MY_BIT_TILDE;
            } 
            // fall through
          case 128: break;
          case 46: 
            { return MY_BIT_XOR_ASSIGN;
            } 
            // fall through
          case 129: break;
          case 47: 
            { return MY_SEND_CHANNEL;
            } 
            // fall through
          case 130: break;
          case 48: 
            { return MY_LESS_OR_EQUAL;
            } 
            // fall through
          case 131: break;
          case 49: 
            { return MY_SHIFT_LEFT;
            } 
            // fall through
          case 132: break;
          case 50: 
            { return MY_MUL_ASSIGN;
            } 
            // fall through
          case 133: break;
          case 51: 
            { return MY_REMAINDER_ASSIGN;
            } 
            // fall through
          case 134: break;
          case 52: 
            { return MY_GREATER_OR_EQUAL;
            } 
            // fall through
          case 135: break;
          case 53: 
            { return MY_SHIFT_RIGHT;
            } 
            // fall through
          case 136: break;
          case 54: 
            { return MY_IN;
            } 
            // fall through
          case 137: break;
          case 55: 
            { return MY_IF;
            } 
            // fall through
          case 138: break;
          case 56: 
            { return MY_FN;
            } 
            // fall through
          case 139: break;
          case 57: 
            { return MY_NUMBER;
            } 
            // fall through
          case 140: break;
          case 58: 
            { return MY_TRIPLE_DOT;
            } 
            // fall through
          case 141: break;
          case 59: 
            { return MY_LET;
            } 
            // fall through
          case 142: break;
          case 60: 
            { return MY_END;
            } 
            // fall through
          case 143: break;
          case 61: 
            { return MY_TRY;
            } 
            // fall through
          case 144: break;
          case 62: 
            { return MY_BIT_CLEAR_ASSIGN;
            } 
            // fall through
          case 145: break;
          case 63: 
            { return MY_SHIFT_LEFT_ASSIGN;
            } 
            // fall through
          case 146: break;
          case 64: 
            { return MY_SHIFT_RIGHT_ASSIGN;
            } 
            // fall through
          case 147: break;
          case 65: 
            { return MY_INT;
            } 
            // fall through
          case 148: break;
          case 66: 
            { return MY_NEW;
            } 
            // fall through
          case 149: break;
          case 67: 
            { return MY_NULL;
            } 
            // fall through
          case 150: break;
          case 68: 
            { return MY_FOR;
            } 
            // fall through
          case 151: break;
          case 69: 
            { return MY_ELSE;
            } 
            // fall through
          case 152: break;
          case 70: 
            { return MY_SEMICOLON_SYNTHETIC;
            } 
            // fall through
          case 153: break;
          case 71: 
            { return MY_TRUE;
            } 
            // fall through
          case 154: break;
          case 72: 
            { return MY_ELSIF;
            } 
            // fall through
          case 155: break;
          case 73: 
            { return MY_THROW;
            } 
            // fall through
          case 156: break;
          case 74: 
            { return MY_WHILE;
            } 
            // fall through
          case 157: break;
          case 75: 
            { return MY_FALSE;
            } 
            // fall through
          case 158: break;
          case 76: 
            { return MY_BREAK;
            } 
            // fall through
          case 159: break;
          case 77: 
            { return MY_CATCH;
            } 
            // fall through
          case 160: break;
          case 78: 
            { return MY_LAMBDA;
            } 
            // fall through
          case 161: break;
          case 79: 
            { return MY_RETURN;
            } 
            // fall through
          case 162: break;
          case 80: 
            { return MY_FINALLY;
            } 
            // fall through
          case 163: break;
          case 81: 
            { return MY_CONTINUE;
            } 
            // fall through
          case 164: break;
          case 82: 
            { return MY_REGSTATEMENT;
            } 
            // fall through
          case 165: break;
          case 83: 
            { return MY_RAW_STRING;
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
